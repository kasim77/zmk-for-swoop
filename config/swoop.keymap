/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tab_esc_ctrl: tab_esc_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp TAB>;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <180>;
            tapping-term-ms = <200>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            global-quick-tap;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 5>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "Base";
            bindings = <
&kp Q  &kp W  &kp E           &kp R        &kp T            &kp Y      &kp U         &kp I           &kp O    &kp P
&kp A  &kp S  &kp D           &ltq 4 F     &kp G            &kp H      &kp J         &kp K           &kp L    &gqt RCTRL SEMICOLON
&kp Z  &kp X  &kp C           &kp V        &kp B            &kp N      &kp M         &kp COMMA       &kp DOT  &kp QUESTION
              &gqt LCTRL TAB  &lt 1 SPACE  &kp BACKSPACE    &kp ENTER  &ltq 2 SPACE  &kp LEFT_SHIFT
            >;
        };

        number {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6      &kp NUMBER_7       &kp N8     &kp NUMBER_9   &kp N0
&trans        &trans        &trans        &trans        &trans    &trans            &kp MINUS          &kp EQUAL  &kp SEMICOLON  &kp SQT
&trans        &trans        &trans        &trans        &trans    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans     &trans         &trans
                            &trans        &trans        &trans    &trans            &trans             &trans
            >;
        };

        symbol {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET       &kp AMPERSAND    &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans           &trans       &trans    &trans      &trans         &trans          &kp UNDERSCORE   &kp PLUS   &trans                &trans
&trans           &trans       &trans    &trans      &trans         &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans     &trans                &trans
                              &trans    &trans      &trans         &trans          &trans           &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        arrow {
            bindings = <
&kp LA(Q)      &kp LA(W)  &trans  &trans  &trans    &trans          &trans          &trans        &trans     &trans
&kp LA(LC(A))  &trans     &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&trans         &trans     &trans  &trans  &trans    &trans          &trans          &trans        &trans     &trans
                          &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };
    };
};
